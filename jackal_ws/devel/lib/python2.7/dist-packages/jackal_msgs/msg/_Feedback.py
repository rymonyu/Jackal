# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jackal_msgs/Feedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import jackal_msgs.msg
import std_msgs.msg

class Feedback(genpy.Message):
  _md5sum = "3bdabb0ef46338ee5672d1b82220ab49"
  _type = "jackal_msgs/Feedback"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message represents high-frequency feedback from the MCU,
# as necessary to support closed-loop control and thermal monitoring.
# Default publish frequency is 50Hz.

Header header

DriveFeedback[2] drivers

# Temperatures 
float32 pcb_temperature
float32 mcu_temperature

# Commanded control mode, use the TYPE_ constants from jackal_msgs/Drive.
int8 commanded_mode

# Actual control mode. This may differ from the commanded in cases where
# the motor enable is off, the motors are in over-current, etc.
int8 actual_mode

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: jackal_msgs/DriveFeedback
# This message represents feedback data from a single drive unit (driver + motor).

# Current flowing from battery into the MOSFET bridge.
float32 current

# Instantaneous duty cycle of MOSFET bridge.
float32 duty_cycle

# Temperatures measured in the MOSFET bridge and on the motor casing, in deg C.
float32 bridge_temperature
float32 motor_temperature

# Encoder data
float32 measured_velocity   # rad/s
float32 measured_travel     # rad

# True if the underlying driver chip reports a fault condition.
bool driver_fault
"""
  __slots__ = ['header','drivers','pcb_temperature','mcu_temperature','commanded_mode','actual_mode']
  _slot_types = ['std_msgs/Header','jackal_msgs/DriveFeedback[2]','float32','float32','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,drivers,pcb_temperature,mcu_temperature,commanded_mode,actual_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Feedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drivers is None:
        self.drivers = [jackal_msgs.msg.DriveFeedback() for _ in range(2)]
      if self.pcb_temperature is None:
        self.pcb_temperature = 0.
      if self.mcu_temperature is None:
        self.mcu_temperature = 0.
      if self.commanded_mode is None:
        self.commanded_mode = 0
      if self.actual_mode is None:
        self.actual_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.drivers = [jackal_msgs.msg.DriveFeedback() for _ in range(2)]
      self.pcb_temperature = 0.
      self.mcu_temperature = 0.
      self.commanded_mode = 0
      self.actual_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      for val1 in self.drivers:
        _x = val1
        buff.write(_get_struct_6fB().pack(_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault))
      _x = self
      buff.write(_get_struct_2f2b().pack(_x.pcb_temperature, _x.mcu_temperature, _x.commanded_mode, _x.actual_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drivers is None:
        self.drivers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      self.drivers = []
      for i in range(0, 2):
        val1 = jackal_msgs.msg.DriveFeedback()
        _x = val1
        start = end
        end += 25
        (_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault,) = _get_struct_6fB().unpack(str[start:end])
        val1.driver_fault = bool(val1.driver_fault)
        self.drivers.append(val1)
      _x = self
      start = end
      end += 10
      (_x.pcb_temperature, _x.mcu_temperature, _x.commanded_mode, _x.actual_mode,) = _get_struct_2f2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      for val1 in self.drivers:
        _x = val1
        buff.write(_get_struct_6fB().pack(_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault))
      _x = self
      buff.write(_get_struct_2f2b().pack(_x.pcb_temperature, _x.mcu_temperature, _x.commanded_mode, _x.actual_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.drivers is None:
        self.drivers = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      self.drivers = []
      for i in range(0, 2):
        val1 = jackal_msgs.msg.DriveFeedback()
        _x = val1
        start = end
        end += 25
        (_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault,) = _get_struct_6fB().unpack(str[start:end])
        val1.driver_fault = bool(val1.driver_fault)
        self.drivers.append(val1)
      _x = self
      start = end
      end += 10
      (_x.pcb_temperature, _x.mcu_temperature, _x.commanded_mode, _x.actual_mode,) = _get_struct_2f2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2b = None
def _get_struct_2f2b():
    global _struct_2f2b
    if _struct_2f2b is None:
        _struct_2f2b = struct.Struct("<2f2b")
    return _struct_2f2b
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6fB = None
def _get_struct_6fB():
    global _struct_6fB
    if _struct_6fB is None:
        _struct_6fB = struct.Struct("<6fB")
    return _struct_6fB
