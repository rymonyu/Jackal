# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jackal_msgs/DriveFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DriveFeedback(genpy.Message):
  _md5sum = "8dd0b7a3cfa20cfc5c054ddd9763609b"
  _type = "jackal_msgs/DriveFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message represents feedback data from a single drive unit (driver + motor).

# Current flowing from battery into the MOSFET bridge.
float32 current

# Instantaneous duty cycle of MOSFET bridge.
float32 duty_cycle

# Temperatures measured in the MOSFET bridge and on the motor casing, in deg C.
float32 bridge_temperature
float32 motor_temperature

# Encoder data
float32 measured_velocity   # rad/s
float32 measured_travel     # rad

# True if the underlying driver chip reports a fault condition.
bool driver_fault
"""
  __slots__ = ['current','duty_cycle','bridge_temperature','motor_temperature','measured_velocity','measured_travel','driver_fault']
  _slot_types = ['float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       current,duty_cycle,bridge_temperature,motor_temperature,measured_velocity,measured_travel,driver_fault

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DriveFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.current is None:
        self.current = 0.
      if self.duty_cycle is None:
        self.duty_cycle = 0.
      if self.bridge_temperature is None:
        self.bridge_temperature = 0.
      if self.motor_temperature is None:
        self.motor_temperature = 0.
      if self.measured_velocity is None:
        self.measured_velocity = 0.
      if self.measured_travel is None:
        self.measured_travel = 0.
      if self.driver_fault is None:
        self.driver_fault = False
    else:
      self.current = 0.
      self.duty_cycle = 0.
      self.bridge_temperature = 0.
      self.motor_temperature = 0.
      self.measured_velocity = 0.
      self.measured_travel = 0.
      self.driver_fault = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6fB().pack(_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault,) = _get_struct_6fB().unpack(str[start:end])
      self.driver_fault = bool(self.driver_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6fB().pack(_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.current, _x.duty_cycle, _x.bridge_temperature, _x.motor_temperature, _x.measured_velocity, _x.measured_travel, _x.driver_fault,) = _get_struct_6fB().unpack(str[start:end])
      self.driver_fault = bool(self.driver_fault)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fB = None
def _get_struct_6fB():
    global _struct_6fB
    if _struct_6fB is None:
        _struct_6fB = struct.Struct("<6fB")
    return _struct_6fB
